/*
 * This custom function was generated by the Actions Generator
 * in order to enable the other custom functions in this app
 * upon installation into a tenant.
 */

var ActionInstaller = require('mozu-action-helpers/installers/actions');
var tenantClient = require("mozu-node-sdk/clients/platform/tenant")();
var constants = require("mozu-node-sdk/constants");
var paymentConstants = require("../../Utils/constants");
var _ = require("underscore");


function AppInstall(context, callback) {
	var self = this;
	self.ctx = context;
	self.cb = callback;

	self.initialize = function() {
		console.log(context);
		console.log("Getting tenant", self.ctx.apiContext.tenantId);
		tenantClient.getTenant({tenantId: self.ctx.apiContext.tenantId})
		.then(function(tenant){
			enablePaypalExpressWorkflow(tenant);
		}, self.cb);
	};

	function enablePaypalExpressWorkflow(tenant) {

		try {
			console.log("Installing PayPal Express payment settings", tenant);
			var paymentDef = {
		    "name": paymentConstants.PAYMENTSETTINGID,
		    "namespace": context.get.nameSpace(),
		    "isEnabled": "false",
		    "credentials":  [
			    	getPaymentActionFieldDef("Environment", paymentConstants.ENVIRONMENT, "RadioButton", false,getEnvironmentVocabularyValues()),
			    	getPaymentActionFieldDef("User Name", paymentConstants.USERNAME, "TextBox", true,null),
			    	getPaymentActionFieldDef("Password", paymentConstants.PASSWORD, "TextBox", true,null),
			    	getPaymentActionFieldDef("Signature", paymentConstants.SIGNATURE, "TextBox", true,null),
			    	getPaymentActionFieldDef("Merchant account ID", paymentConstants.MERCHANTACCOUNTID, "TextBox", false,null),
			    	getPaymentActionFieldDef("Order Processing", paymentConstants.ORDERPROCESSING, "RadioButton", false,getOrderProcessingVocabularyValues())
			    ]
			};

			console.log("PayPal Express Payment definition", paymentDef);

			var tasks = tenant.sites.map(function(site) {
											console.log("Adding payment settings for site", site.id);
											var paymentSettingsClient = require("mozu-node-sdk/clients/commerce/settings/checkout/paymentSettings")();
											paymentSettingsClient.context[constants.headers.SITE] = site.id;
											//GetExisting 
											return paymentSettingsClient.getThirdPartyPaymentWorkflows({}).then(function(paymentSettings){
												var existing = _.findWhere(paymentSettings, {"name" : paymentDef.name});
												
												if (!existing) 
													return paymentSettingsClient.addThirdPartyPaymentWorkflow(paymentDef);
												else
													console.log("PayPal Express payment Def exists for "+site.id);
											});
										});

			Promise.all(tasks).then(function(result) {
				console.log("PayPal Express payment definition installed");
				enableActions();
			}, function(error) {
				self.cb(error);
			});
		} catch(e) {
			self.cb(e);
		}
	}




	function enableActions() {
		console.log("installing code actions");
		var installer = new ActionInstaller({ context: self.ctx.apiContext });
	 	installer.enableActions(context).then(self.cb.bind(null, null), self.cb);	
	}


	
	function getEnvironmentVocabularyValues() {
		return [
			getVocabularyContent("production", "en-US", "Production"),
			getVocabularyContent("sandbox", "en-US", "Sandbox")
		];
	}

	function getOrderProcessingVocabularyValues() {
		return [
			getVocabularyContent(paymentConstants.CAPTUREONSUBMIT, "en-US", "Authorize and Capture on Order Placement"),
			getVocabularyContent(paymentConstants.CAPTUREONSHIPMENT, "en-US", "Authorize on Order Placement and Capture on Order Shipment")
		];
	}

	function getVocabularyContent(key, localeCode, value) {
		return {
			"key" : key,
			"contents" : [{
				"localeCode" : localeCode,
				"value" : value
			}]
		};
	}

	function getPaymentActionFieldDef(displayName, key, type, isSensitive, vocabularyValues) {
		return {
	          "displayName": displayName,
	          "apiName": key,
	          "inputType": type,
	          "isSensitive": isSensitive,
	          "vocabularyValues" : vocabularyValues
		};
	}


}

module.exports = function(context, callback) {
 	try {
  		var appInstall = new AppInstall(context, callback);
  		appInstall.initialize();
  	} catch(e) {
  		callback(e);
  	}
};